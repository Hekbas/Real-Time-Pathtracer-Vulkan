#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_GOOGLE_include_directive : enable
#include "common.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D outputImage;

layout(push_constant) uniform PushConstants {
    int frame;
    vec3 cameraPos;
    vec3 cameraFront;
    vec3 cameraUp;
    vec3 cameraRight;
} pc;

layout(location = 0) rayPayloadEXT HitPayload payload;

void createCoordinateSystem(in vec3 N, out vec3 T, out vec3 B) {
    if(abs(N.x) > abs(N.y))
        T = vec3(N.z, 0, -N.x) / sqrt(N.x * N.x + N.z * N.z);
    else
        T = vec3(0, -N.z, N.y) / sqrt(N.y * N.y + N.z * N.z);
    B = cross(N, T);
}

vec3 sampleHemisphere(float rand1, float rand2) {
    vec3 dir;
    dir.x = cos(2 * M_PI * rand2) * sqrt(1 - rand1 * rand1);
    dir.y = sin(2 * M_PI * rand2) * sqrt(1 - rand1 * rand1);
    dir.z = rand1;
    return dir;
}

vec3 sampleDirection(float rand1, float rand2, vec3 normal) {
    vec3 tangent;
    vec3 bitangent;
    createCoordinateSystem(normal, tangent, bitangent);
    vec3 dir = sampleHemisphere(rand1, rand2);
    return dir.x * tangent + dir.y * bitangent + dir.z * normal;
}

void main()
{
    // SPP for anti-aliasing
    int maxSamples = 32;
    vec3 color = vec3(0.0);

    for(uint sampleNum = 0; sampleNum < maxSamples; sampleNum++) {
        // Unique random seed per sample/frame
        uvec2 s = pcg2d(ivec2(gl_LaunchIDEXT.xy) * (sampleNum + maxSamples * pc.frame + 1));
        uint seed = s.x + s.y;

        // Calc ray + AA Jitter
        const vec2 screenPos = vec2(gl_LaunchIDEXT.xy) + vec2(rand(seed), rand(seed));
        const vec2 inUV = screenPos / vec2(gl_LaunchSizeEXT.xy);
        vec2 d = inUV * 2.0 - 1.0;
        
        float aspect_ratio = float(gl_LaunchSizeEXT.x) / float(gl_LaunchSizeEXT.y);
        float fov = 45.0; 
        float tan_fov = tan(radians(fov * 0.5));

        vec3 rayDir = normalize(
            pc.cameraFront +
            pc.cameraRight * d.x * aspect_ratio * tan_fov +
            pc.cameraUp    * d.y * tan_fov
        );

        // Initial ray properties
        vec4 origin    = vec4(pc.cameraPos, 1.0);
        vec4 direction = vec4(rayDir, 0.0);
        vec3 weight = vec3(1.0);
        payload.done = false;

        // --- Path Tracing Loop ---
        for(uint depth = 0; depth < 8; depth++){
            traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz, 0.001, direction.xyz, 10000.0, 0);

            // Add emitted light from hit
            color += weight * payload.emission;

            // Prepare next bounce
            origin.xyz = payload.position;
            direction.xyz = sampleDirection(rand(seed), rand(seed), payload.normal);
            float pdf = 1.0 / (2.0 * M_PI);

            // Update path weight with BDRF...
            weight *= payload.brdf * dot(direction.xyz, payload.normal) / pdf;

            // Terminate ray if weight is too low
            if(payload.done){
                break;
            }
        }
    }
    color /= maxSamples;
    
    vec4 oldColor = imageLoad(outputImage, ivec2(gl_LaunchIDEXT.xy));
    vec4 newColor = (vec4(color, 1.0) + (oldColor * pc.frame)) / (pc.frame + 1);
    imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), newColor);
}